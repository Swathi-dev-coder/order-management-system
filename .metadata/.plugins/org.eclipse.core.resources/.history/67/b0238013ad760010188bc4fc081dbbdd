package com.oms.order_service;

import java.io.IOException;
import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JwtRequestFilter extends OncePerRequestFilter {
	 @Autowired
	    private JwtValidator jwtValidator;

	    @Override
	    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
	            throws ServletException, IOException {
	    	  System.out.println("JwtRequestFilter: incoming -> " + request.getMethod() + " " + request.getRequestURI());
	          final String authHeader = request.getHeader("Authorization");
	          System.out.println("JwtRequestFilter: Authorization header = " + authHeader);


	        String username = null;

	        if (authHeader != null && authHeader.startsWith("Bearer ")) {
	            String jwtToken = authHeader.substring(7); 
	            System.out.println("JwtRequestFilter: token (first 20 chars) = " + (token.length()>20?token.substring(0,20):token));

	            username = jwtValidator.validateToken(jwtToken);
	        }
            System.out.println("JwtRequestFilter: username from validator = " + username);

	        if (username != null) {
	            UsernamePasswordAuthenticationToken authToken =
	                new UsernamePasswordAuthenticationToken(username, null, new ArrayList<>());
	            authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
	            SecurityContextHolder.getContext().setAuthentication(authToken);
	        }

	        filterChain.doFilter(request, response);
	    }

}
