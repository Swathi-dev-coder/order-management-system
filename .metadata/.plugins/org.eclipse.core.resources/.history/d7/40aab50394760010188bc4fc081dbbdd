package com.oms.userservice.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.oms.userservice.JwtUtil;
import com.oms.userservice.model.User;
import com.oms.userservice.service.UserService;
@RestController
@RequestMapping("/api/auth")
public class UserController {
	@Autowired
	private UserService service;
	 @Autowired
	    private JwtUtil jwtUtil;

	    private final String USERNAME = "user";
	    private final String PASSWORD = "password";

	    @PostMapping("/login")
	    public ResponseEntity<?> login(@RequestBody AuthRequest request) {
	        if (USERNAME.equals(request.getUsername()) && PASSWORD.equals(request.getPassword())) {
	            String token = jwtUtil.generateToken(request.getUsername());
	            return ResponseEntity.ok(new AuthResponse(token));
	        }
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
	    }

	    public static class AuthRequest {
	        private String username;
	        private String password;
			public String getUsername() {
				return username;
			}
			public void setUsername(String username) {
				this.username = username;
			}
			public String getPassword() {
				return password;
			}
			public void setPassword(String password) {
				this.password = password;
			}

	    }

	    public static class AuthResponse {
	        private String token;

	        public AuthResponse(String token) {
	            this.token = token;
	        }
	        // getter
	    }

	@GetMapping
	public List<User> getAllUsers(){
		return service.getAllUsers();
	}

	@GetMapping("/{id}")
	public ResponseEntity<User> getUserById(@PathVariable Long id) {
		User user = service.getUserById(id);
		return (user != null) ? ResponseEntity.ok(user) : ResponseEntity.notFound().build();
	}

	@PostMapping
	public User createUser(@RequestBody User user) {
		return service.saveUser(user);
	}
	
//	@PutMapping("/{id}")
//    public ResponseEntity<User> updateUser(@PathVariable Long id, @RequestBody User user) {
//        User updated = service.updateUser(id, user);
//        return (updated != null) ? ResponseEntity.ok(updated) : ResponseEntity.notFound().build();
//    }

    @DeleteMapping("/{id}")
    public void deleteUser(@PathVariable Long id) {
         service.deleteUser(id);
    }
}
